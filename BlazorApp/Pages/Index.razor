@page "/"
@using BlazorApp.Models
@using BlazorApp.Data
@inject DialogService DialogService
<div class="rz-p-sm-12 rz-text-align-center">
    <RadzenDropDown @bind-Value=@doctor Data=@doctors Change=@changeDropDown Style="width: 100%; max-width: 400px;" />
</div>
<RadzenScheduler @ref=@scheduler LoadData="@OnLoadData" Data="@data" TItem="Appointment" StartProperty="Start" EndProperty="End" TextProperty="PersonPesel"
SlotSelect=@OnSlotSelect SlotRender=@OnSlotRender>
  <RadzenMonthView />
  <RadzenWeekView />
</RadzenScheduler>
<RadzenDialog/>
@code {
    AppointmentService appointmentService = new AppointmentService(new MasContext());
    List<Person> doctors;
    Person doctor;
    List<Appointment> data;
    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    /// <summary>
    /// This function does data fetching from db
    /// </summary>
    /// <param name="args">data from loading of scheduler</param>
    /// <returns>Task</returns>
    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End 
        await base.OnInitializedAsync();
        doctors = appointmentService.GetDoctors().ToList();
        data = new List<Appointment>();
        if (doctor != null && doctor.Services.Any())
        {
            foreach (var service in doctor.Services)
            {
                data.AddRange(service.Appointments);
            }
        }
        Console.WriteLine(data.Count);
        StateHasChanged();
    }
    private void Reload()
    {
        StateHasChanged();
    }
    /// <summary>
    /// This function does data fetching at the start of schedule
    /// </summary>
    protected override void OnInitialized()
    {
        doctors = appointmentService.GetDoctors().ToList();
        doctor = doctors.First();
        data = new List<Appointment>();
        foreach (var service in doctor.Services)
        {
            data.AddRange(service.Appointments);
        }
        Console.WriteLine(data.Count);
        appointmentService.OnAppointmentAdded += Reload;
    }
    /// <summary>
    /// this function creates different hue to working hours
    /// </summary>
    /// <param name="args">data from rendering of slots</param>
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }
    /// <summary>
    /// This function creates a new window used in creation of a new appointment; opens AddAppointment.razor
    /// </summary>
    /// <param name="args">arguments from chosen slot</param>
    /// <returns>Task</returns>
    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Appointment data = await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End },{"DoctorPESEL",doctor.Pesel} });
        await scheduler.Reload();
    }
    public void Dispose()
    {   
        // Unsubscribe from the OnAppointmentAdded event
        appointmentService.OnAppointmentAdded -= Reload;
    }
    async Task changeDropDown(){
        await scheduler.Reload();
    }
}

