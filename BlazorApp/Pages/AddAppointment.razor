@page "/test"
@inject DialogService DialogService
@using BlazorApp.Models
@using BlazorApp.Data

<RadzenTemplateForm TItem="Appointment" Data="@data" Submit=@OnSubmit>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="Patient" />
    </div>
    <div class="col">
        <RadzenDropDown @bind-Value=@placeholderPerson Data=@peopleList Style="width: 100%; max-width: 400px;" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="Start" />
    </div>
    <div class="col">
        <RadzenDatePicker @bind-Value="@Start" Name="Start" ShowTime="true" />
        <RadzenRequiredValidator Text="Start is required" Component="Start" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="End" />
    </div>
    <div class="col">
        <RadzenDatePicker Name="End" @bind-Value="@End" ShowTime="true" />
        <RadzenRequiredValidator Component="End" Text="End is required" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="Service" />
    </div>
    <div class="col">
        <RadzenDropDown @bind-Value=@placeholderService Data=@serviceList Style="width: 100%; max-width: 400px;" />
    </div>
</div>
<div class="row">
    <div class="col-md-3"></div>
    <div class="col">
        <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
    </div>
</div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public DateTime Start { get; set; }
    [Parameter]
    public DateTime End { get; set; }
    [Parameter]
    public string DoctorPESEL{get;set;}
    [Parameter]
    public string Pesel { get; set; }
    [Parameter]
    public int IdService { get; set; }
    [Parameter]
    public EventCallback OnDialogClose { get; set; }
    Appointment data = new Appointment();

    List<Service> serviceList;
    Service placeholderService;
    List<Person> peopleList;
    Person placeholderPerson;
    /// <summary>
    /// Parameters are given to the dialog window
    /// </summary>
    protected override void OnParametersSet()
    {
            data.Start = Start;
            data.End = End;
    }
    /// <summary>
    /// This function saves data to the db when you click "Save" button
    /// </summary>
    protected void OnSubmit()
    {
        AppointmentService appointmentService = new AppointmentService(new MasContext());
        data.Start = Start;
        data.End = End;
        data.ServiceIdService = placeholderService.IdService;
        data.IsCancelled = 0;
        data.PersonPesel = placeholderPerson.Pesel;
        appointmentService.addToContext(data);
        DialogService.Close();
    }
    /// <summary>
    /// this function does data fetching
    /// </summary>
    /// <returns>Task</returns>
    protected override async Task OnInitializedAsync()
    { 
        AppointmentService appointmentService = new AppointmentService(new MasContext());
        await base.OnInitializedAsync();
        serviceList = appointmentService.GetServicesByDocPESEL(DoctorPESEL).ToList();
        var appointments = new List<Appointment>();
        peopleList = new List<Person>();
        //for each service get list of appointments and then get list of people from those appointments. Dont use appointmentService for this
        foreach (var service in serviceList)
        {
            appointments.AddRange(service.Appointments);
        }
        foreach (var appointment in appointments)
        {
            peopleList.Add(appointment.PersonPeselNavigation);
        }
        var temp = peopleList.ToHashSet<Person>();
        peopleList = temp.ToList();
        placeholderService = serviceList.First();
        placeholderPerson = peopleList.First();
    }
}